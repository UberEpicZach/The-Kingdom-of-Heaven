activity_KOH_pentecost = {
		
	is_shown = {
		has_character_flag = hosting_pentecost
		has_dlc_feature = advanced_activities
	}
	
	can_start_showing_failures_only = {
		is_available_adult = yes
	}

	is_valid = {
		NOT = {
			has_variable = activity_invalidated
		}
		scope:host = {
			is_landed = yes
			NOT = { is_incapable = yes }
		}
	}

	on_invalidated = {
		every_attending_character = {
			# Remove tournament only effects
			clean_up_recurring_characters_effect = yes
			tournament_clear_tournament_variables_effect = yes
			tournament_clear_tournament_modifiers_effect = yes
		}
		# Host becomes unlanded
		if = {
			limit = {
				scope:host = { is_landed = no }
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
			}
			every_attending_character = {
				trigger_event = activity_system.0320
			}
		}
		if = { # No one shows up
			limit = {
				has_attending_activity_guests = no
			}
			scope:activity = {
				activity_type = { save_scope_as = activity_type }
				activity_location = { save_scope_as = location }
			}
			scope:host = { trigger_event = activity_system.0100 }
		}
		scope:activity = {
			every_attending_character = {
				limit = { is_ai = no }
				# Remove remaining recurring characters.
				clean_up_recurring_characters_effect = yes
				tournament_clear_tournament_variables_effect = yes
			}
		}
	}

	on_host_death = {
		scope:activity = {
			set_variable = {
				name = activity_invalidated
			}
		}
	}

	# desc is only shown in debug AI watch window
	ai_will_do = {
		value = 0
		# Base
		add = {
			value = 30
			desc = "base"
		}
	
		if = {
			limit = {
				this = title:e_hre.holder
			}
			add = {
				value = 900
				desc = "Attempting to Force"
			}
		}

		if = { # Liege already hosting a grand activity
			limit = {
				liege = { has_ongoing_grand_activity_trigger = yes }
			}
			add = {
				value = -1000
				desc = contest_ai_liege_grand_activity
			}
		}
		if = {
			limit = {
				any_activity = {
					is_grand_activity_trigger = yes
					activity_host.top_liege ?= {
						OR = {
							this = root.top_liege # Same realm as root
							any_neighboring_top_liege_realm_owner = { this = root.top_liege } # Neighboring realm
						}
					}
				}
			}
			every_activity = {
				limit = {
					is_grand_activity_trigger = yes
					activity_host.top_liege ?= {
						OR = {
							this = root.top_liege # Same realm as root
							any_neighboring_top_liege_realm_owner = { this = root.top_liege } # Neighboring realm
						}
					}
				}
				add = {
					value = -50
					desc = contest_ai_nearby_grand_activity
				}
			}
		}
		# Personality
		if = { # Avoids responsibilities
			limit = { has_trait = lazy }
			add = {
				value = -20
				desc = lazy
			}
		}
		else_if = { # Better things to do
			limit = { has_trait = diligent }
			add = {
				value = -10
				desc = diligent
			}
		}
		if = { # Likes showing off
			limit = { has_trait = arrogant }
			add = {
				value = 20
				desc = arrogant
			}
		}
		else_if = { #
			limit = { has_trait = humble }
			add = {
				value = -10
				desc = humble
			}
		}
		if = { # In it to win it
			limit = { has_trait = ambitious }
			add = {
				value = 20
				desc = ambitious
			}
		}
		else_if = { #
			limit = { has_trait = content }
			add = {
				value = -10
				desc = content
			}
		}
		if = { # Likes to socialize
			limit = { has_trait = gregarious }
			add = {
				value = 20
				desc = gregarious
			}
		}
		else_if = {
			limit = { has_trait = shy }
			add = {
				value = -10
				desc = shy
			}
		}
		if = {
			limit = { has_trait = reclusive }
			add = {
				value = -25
				desc = reclusive
			}
		}
		# Court
		if = {
			limit = {
				has_royal_court = yes 
				has_court_type = court_warlike
			}
			add = {
				value = 15
				desc = court_warlike
			}
		}
		# Education
		if = {
			limit = { has_trait = education_martial }
			add = {
				value = 25
				desc = education_martial
			}
		}
		if = {
			limit = { has_trait = education_martial_prowess }
			add = {
				value = 25
				desc = education_martial_prowess
			}
		}
		# Culture
		if = {
			limit = { 
				culture = { has_cultural_tradition = tradition_warrior_culture }
			}
			add = {
				value = 25
				desc = tradition_warrior_culture_name
			}
		}
		if = {
			limit = { 
				culture = { has_cultural_tradition = tradition_martial_admiration }
			}
			add = {
				value = 40
				desc = tradition_martial_admiration_name
			}
		}
		if = {
			limit = { 
				culture = { has_cultural_tradition = tradition_chanson_de_geste }
			}
			add = {
				value = 40
				desc = tradition_chanson_de_geste_name
			}
		}
		if = { # Bellicose
			limit = {
				culture = { has_cultural_pillar = ethos_bellicose }
			}
			add = {
				value = 15
				desc = ethos_bellicose
			}
		}
		# Lifestyle
		if = {
			limit = { has_trait = tourney_participant }
			add = {
				value = 25
				desc = tourney_participant
			}
		}
		if = {
			limit = {
				has_trait = tourney_participant
				OR = {
					has_trait_xp = {
						trait = tourney_participant
						track = foot
						value >= trait_second_level
					}
					has_trait_xp = {
						trait = tourney_participant
						track = horse
						value >= trait_second_level
					}
					has_trait_xp = {
						trait = tourney_participant
						track = bow
						value >= trait_second_level
					}
					has_trait_xp = {
						trait = tourney_participant
						track = wit
						value >= trait_second_level
					}
				}
			}
			add = {
				value = 25
				desc = experienced_tourney_participant
			}
		}
		# Stress
		if = { # Low Stress
            limit = { stress >= lower_than_baseline_stress }
            add = {
            	value = 30
            	desc = "lower_than_baseline_stress"
            }
        }
        if = { # High Stress
        	limit = { stress >= higher_than_baseline_stress }
        	add = {
        		value = 30
        		desc = "higher_than_baseline_stress"
        	}
        }
        if = { # Very High Stress
        	limit = { stress >= high_stress }
        	add = {
        		value = 30
        		desc = "high_stress"
        	}
        }
        # Economic Archetype
		if = { # Too busy booming the economy
            limit = {
                OR = {
                    ai_has_economical_boom_personality = yes
                    has_character_flag = ai_boom
                }
            }
            add = {
            	value = -100
            	desc = "Builder"
            }
        }
        if = {
        	limit = { ai_has_warlike_personality = yes }
        	add = {
            	value = 25
            	desc = "Warlike"
            }
        }
        # Economy Sanity
        if = { # Work first, play later
            limit = {
                exists = capital_county
                capital_county.title_province = { free_building_slots > 0 }
            }
            add = {
            	value = -35
            	desc = "Work first, play later"
            }
        }
        # Pacing modifiers
        if = {
            limit = {
                exists = capital_county
				capital_county.title_province = { geographical_region = world_middle_east }
                NOT = {
					exists = global_var:tournament_world_middle_east_motivation
				}
            }
            add = {
            	value = 100
            	desc = "tournament_world_middle_east_motivation"
            }
        }
        if = {
            limit = {
                exists = capital_county
				capital_county.title_province = {
					geographical_region = world_europe
					NOT = { geographical_region = world_europe_west }
				}
                NOT = {
					exists = global_var:tournament_world_europe_motivation
				}
            }
            add = {
            	value = 100
            	desc = "tournament_world_europe_motivation"
            }
        }
        if = {
            limit = {
                exists = capital_county
				capital_county.title_province = { geographical_region = world_europe_west }
                NOT = {
					exists = global_var:tournament_world_europe_west_motivation
				}
            }
            add = {
            	value = 100
            	desc = "tournament_world_europe_west_motivation"
            }
        }
        if = {
            limit = {
                exists = capital_county
				capital_county.title_province = { geographical_region = world_steppe }
                NOT = {
					exists = global_var:tournament_world_steppe_motivation
				}
            }
            add = {
            	value = 100
            	desc = "tournament_world_steppe_motivation"
            }
        }
        if = {
            limit = {
                exists = capital_county
				capital_county.title_province = { geographical_region = world_africa }
                NOT = {
					exists = global_var:tournament_world_africa_motivation
				}
            }
            add = {
            	value = 100
            	desc = "tournament_world_africa_motivation"
            }
        }
        if = {
            limit = {
                exists = capital_county
				capital_county.title_province = { geographical_region = world_india }
                NOT = {
					exists = global_var:tournament_world_india_motivation
				}
            }
            add = {
            	value = 100
            	desc = "tournament_world_india_motivation"
            }
        }
        # Negative Pacing modifiers
        if = {
            limit = {
				years_from_game_start > 100
                exists = capital_county
				capital_county.title_province = { geographical_region = world_middle_east }
				exists = global_var:tournament_world_middle_east_motivation
            }
            add = {
            	value = -45
            	desc = "tournament_world_middle_east_demotivation"
            }
        }
        if = {
            limit = {
				years_from_game_start > 100
                exists = capital_county
				capital_county.title_province = {
					geographical_region = world_europe
					NOT = { geographical_region = world_europe_west }
				}
                exists = global_var:tournament_world_europe_motivation
            }
            add = {
            	value = -45
            	desc = "tournament_world_europe_demotivation"
            }
        }
        if = {
            limit = {
				years_from_game_start > 100
                exists = capital_county
				capital_county.title_province = { geographical_region = world_europe_west }
                exists = global_var:tournament_world_europe_west_motivation
            }
            add = {
            	value = -45
            	desc = "tournament_world_europe_west_demotivation"
            }
        }
        if = {
            limit = {
				years_from_game_start > 100
                exists = capital_county
				capital_county.title_province = { geographical_region = world_steppe }
                exists = global_var:tournament_world_steppe_motivation
            }
            add = {
            	value = -45
            	desc = "tournament_world_steppe_demotivation"
            }
        }
        if = {
            limit = {
				years_from_game_start > 100
                exists = capital_county
				capital_county.title_province = { geographical_region = world_africa }
                exists = global_var:tournament_world_africa_motivation
            }
            add = {
            	value = -45
            	desc = "tournament_world_africa_demotivation"
            }
        }
        if = {
            limit = {
				years_from_game_start > 100
                exists = capital_county
				capital_county.title_province = { geographical_region = world_india }
                exists = global_var:tournament_world_india_motivation
            }
            add = {
            	value = -45
            	desc = "tournament_world_india_demotivation"
            }
        }
	}

	ai_check_interval = 60

	###################
	# PARAMETERS
	###################

	is_grand_activity = yes

	is_single_location = yes

	wait_time_before_start = {
		# Fixed duration, because it is an open activity
		# Note: this determines other event firing times, please edit below value directly
		months = tournament_wait_time_before_start_months
	}
	max_guest_arrival_delay_time = {
		months = 3
	}

	cooldown = {
		years = 10
	}

	province_filter = realm
	ai_province_filter = realm

	ai_will_select_province = {
		value = 10
		if = {
			limit = {
				this = province:2694
			}
			add = {
				value = 1000000
				desc = "rovince:2694 preferred"
			}
		}
	}

	is_location_valid = {
		this = province:2694
	}

	province_description = {
		#Does this have a temple holding?
		triggered_desc = {
			trigger = {
				has_holding_type = church_holding
			}
			desc = activity_KOH_pentecost_temple_holding_desc
		}
	}

	max_province_icons = 5

	ui_predicted_cost = {
		gold = {
			value = 10

			# Make it a multiple of 5 (rounded up)
			divide = 5 
			ceiling = yes 
			multiply = 5
		}
	}

	# Guests bring knights & close family
	travel_entourage_selection = {
		weight = {
			value = standard_travel_entourage_additions
			if = {
				limit = {
					OR = {
						is_knight_of = scope:owner
						scope:owner.court_position:champion_court_position ?= this
					}
					trigger_if = {
						limit = { is_landed = yes }
						highest_held_title_tier = tier_barony
					}
					is_available = yes
				}
				add = 100
			}
			if = {
				limit = {
					is_landed = no
					OR = {
						is_spouse_of = scope:owner
						is_close_family_of = scope:owner
					}
					is_available = yes
				}
				add = 50
			}
		}

		max = 15
		ai_max = 3
		invite_rule_order = 1
   	}

	conclusion_description = {
		desc = tournament_conclusion_general
		desc = {
			triggered_desc = {
				trigger = {
					exists = scope:activity.var:melee_winner
				}
				desc = tournament_conclusion_winner_melee
			}
			triggered_desc = {
				trigger = {
					exists = scope:activity.var:archery_winner
				}
				desc = tournament_conclusion_winner_archery
			}
			triggered_desc = {
				trigger = {
					exists = scope:activity.var:horse_race_winner
				}
				desc = tournament_conclusion_winner_horse_race
			}
			triggered_desc = {
				trigger = { exists = var:recital_winner }
				desc = tournament_conclusion_winner_recital
			}
			triggered_desc = {
				trigger = { exists = var:joust_winner }
				desc = tournament_conclusion_winner_joust
			}
			triggered_desc = {
				trigger = { exists = var:wrestling_winner }
				desc = tournament_conclusion_winner_wrestling
			}
			triggered_desc = {
				trigger = { exists = var:duel_winner }
				desc = tournament_conclusion_winner_duel
			}
			triggered_desc = {
				trigger = { exists = var:board_game_winner }
				desc = tournament_conclusion_winner_board_game
			}
		}
	}

   	window_characters = {
		player = {
			camera = camera_body
			
			effect = {
				scope:player ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = idle
			}
		}
		host = {
			camera = camera_body
			
			effect = {
				scope:host ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = happiness
			}
		}
		melee_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:melee_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = sword_coup_degrace
			}
		}
		archery_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:archery_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = hunting_Shortbow_rest_arrow_default
			}
		}
		horse_race_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:horse_race_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = throne_room_cheer_1
			}
		}
		recital_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:recital_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = ecstasy
			}
		}
		joust_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:joust_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = jockey_victory
			}
		}
		duel_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:duel_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = marshal
			}
		}
		board_game_winner = {
			camera = camera_body
			
			effect = {
				scope:activity.var:board_game_winner ?= { add_to_list = characters }
			}
			scripted_animation = {
				animation = chess_certain_win
			}
		}
	}

	###################
	# GRAPHICS
	###################

	map_entity = { #MENA entity
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_steppe_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		reference = "building_mena_tournament_01_entity"
	}

	map_entity = {
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		reference = "building_indian_tournament_01_entity"
	}

	map_entity = "building_western_tournament_01_entity"

	background = {
		texture = "gfx/interface/illustrations/activity_header_backgrounds/activity_tournament.dds"
		environment = "environment_jerusalem"
		ambience = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_tournament_locale"
	}

	locale_background = { #MENA Background
		trigger = {
			activity_location.culture = {
				OR = {
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/tournament_terrain_mena.dds"
		environment = "environment_jerusalem"
		ambience = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_tournament_locale"
		music = "tournamentmena_cue"
	}

	locale_background = { #India Background
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/tournament_terrain_europe_farmland.dds"
		environment = "environment_jerusalem"
		ambience = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_tournament_locale"
		music = "tournamentindia_cue"
	}

	locale_background = { #Tribal Background
		trigger = {
			activity_location.culture = {
				has_graphical_india_culture_group_trigger = yes
			}
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/tournament_terrain_europe_farmland.dds"
		environment = "environment_jerusalem"
		ambience = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_tournament_locale"
		music = "tournamentindia_cue"
	}

	locale_background = { #Western Background
		trigger = {
			activity_location.culture = {
				NOR = {
					has_graphical_india_culture_group_trigger = yes
					has_graphical_mena_culture_group_trigger = yes
					has_graphical_african_culture_group_trigger = yes
				}
			}
		}
		texture = "gfx/interface/illustrations/activity_backgrounds/tournament_terrain_europe_farmland.dds"
		environment = "environment_jerusalem"
		ambience = "event:/DLC/EP2/SFX/Ambience/2D/ep2_amb_2d_tournament_locale"
		music = "tournamentwest_cue"
	}

	###################
	# OPTIONS
	###################

	options = {
		#########
		# SIZE OF OFFERING OPTION
		#########

		tournament_option_accommodations = {
			tournament_accommodations_bad = {

				cost = {
					gold = {
						add = {
							add = {
								value = tournament_option_bad_cost
								desc = tournament_accommodations_bad
							}
							add = {
								value = tournament_option_bad_cost
								multiply = activity_cost_scale_by_era
								subtract = tournament_option_bad_cost
								desc = activity_cost_scale_by_era_desc
							}
							# Some people get one free.
							if = {
								limit = { factor_zero_if_entitled_to_freebie_activity_trigger = yes }
								multiply = 0
							}
						}
					}
				}
				ai_will_do = {
					value = 0
					add = { #Base amount
						value = 30
					}
					if = {
						limit = {
							has_trait = greedy
						}
						add = 30
					}
					if = {
						limit = {
							OR = {
								has_trait = lazy
								has_trait = temperate
								has_trait = content
							}
						}
						add = 15
					}
					if = {
						limit = {
							has_trait = humble
						}
						add = 10
					}
				}

				on_start = {
					scope:activity = {
						set_variable = {
							name = invite_width
							value = 0
						}
					}
				}
			}
			tournament_accommodations_normal = {
				default = yes
				is_valid = {
					gold > medium_gold_value
				}

				on_start = {
					scope:activity = {
						set_variable = {
							name = invite_width
							value = 1
						}
					}
				}

				cost = {
					gold = {
						add = {
							add = {
								value = tournament_option_normal_cost
								desc = tournament_accommodations_normal
							}
							add = {
								value = tournament_option_normal_cost
								multiply = activity_cost_scale_by_era
								subtract = tournament_option_normal_cost
								desc = activity_cost_scale_by_era_desc
							}
							# Some people get one free.
							if = {
								limit = { factor_zero_if_entitled_to_freebie_activity_trigger = yes }
								multiply = 0
							}
						}
					}
				}

				ai_will_do = {
					value = 0
					add = { #Base amount
						value = 50
					}
				}
			}
			tournament_accommodations_good = {
				is_valid = {
					gold > major_gold_value
				}

				on_start = {
					scope:host = {
						add_prestige = medium_prestige_value
					}
					scope:activity = {
						set_variable = {
							name = invite_width
							value = 2
						}
					}
				}

				ai_will_do = {
					value = 0
					add = { #Base amount
						value = 30
					}
					if = {
						limit = {
							has_trait = generous
						}
						add = 30
					}
					if = {
						limit = {
							OR = {
								has_trait = diligent
								has_trait = gluttonous
								has_trait = ambitious
							}
						}
						add = 15
					}
					if = {
						limit = {
							has_trait = arrogant
						}
						add = 10
					}
				}

				cost = {
					gold = {	
						add = {
							add = {
								value = tournament_option_good_cost
								desc = tournament_accommodations_good
							}
							add = {
								value = tournament_option_good_cost
								multiply = activity_cost_scale_by_era
								subtract = tournament_option_good_cost
								desc = activity_cost_scale_by_era_desc
							}
							# Some people get one free.
							if = {
								limit = { factor_zero_if_entitled_to_freebie_activity_trigger = yes }
								multiply = 0
							}
						}
					}
				}
			}
		}

		feast_option_food = {
			feast_food_bad = {
				is_shown = { has_dlc_feature = advanced_activities }
				
				ai_will_do = {
					value = 0
					# Financial preference.
					add = activity_option_likes_cheap_expense_value
					# Fanciness preference.
					add = activity_option_likes_functional_food_option_value
				}
			}
			feast_food_normal = {
				default = yes
				cost = {
					gold = {
						add = {
							add = {
								value = 10
								desc = feast_food_normal
							}
							add = {
								value = 10
								multiply = activity_cost_scale_by_tier
								subtract = 10
								desc = activity_cost_scale_by_tier_desc
							}
							add = {
								value = 10
								multiply = activity_cost_scale_by_era
								subtract = 10
								desc = activity_cost_scale_by_era_desc
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 10
									add = {
										value = 10
										multiply = activity_cost_scale_by_tier
										subtract = 10
									}
									add = {
										value = 10
										multiply = activity_cost_scale_by_era
										subtract = 10
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
							min = 0
						}
					}
				}

				ai_will_do = {
					value = 0
					# Financial preference.
					add = activity_option_likes_middling_expense_value
					# Fanciness preference.
					## We just use slightly reduced fanciness prefs here.
					add = {
						value = activity_option_likes_ostentatious_food_option_value
						multiply = 0.5
					}
				}
			}
			feast_food_good = {
				is_shown = { has_dlc_feature = advanced_activities }

				cost = {
					gold = {
						add = {
							add = {
								value = 35
								desc = feast_food_good
							}
							add = {
								value = 35
								multiply = activity_cost_scale_by_tier
								subtract = 35
								desc = activity_cost_scale_by_tier_desc
							}
							add = {
								value = 35
								multiply = activity_cost_scale_by_era
								subtract = 35
								desc = activity_cost_scale_by_era_desc
							}
							if = {
								limit = {
									dynasty ?= {
										has_dynasty_perk = law_legacy_1
									}
								}
								subtract = {
									value = 35
									add = {
										value = 35
										multiply = activity_cost_scale_by_tier
										subtract = 35
									}
									add = {
										value = 35
										multiply = activity_cost_scale_by_era
										subtract = 35
									}
									multiply = law_legacy_cost_reduction_mult
									desc = law_legacy_1_name
								}
							}
							min = 0
						}
					}
				}

				ai_will_do = {
					value = 0
					# Financial preference.
					add = activity_option_likes_heavy_expense_value
					# Fanciness preference.
					add = activity_option_likes_ostentatious_food_option_value
				}
			}
		}

	}

	###################
	# PHASES
	###################

	#num_pickable_phases = tournament_active_phase_count_value

	phases = {
		#FIRST PHASE

		# Observe a Cultural Festival
		tour_phase_cultural_festival = {
			order = 1
			is_predefined = yes

			# Is this phase valid to execute for this ongoing activity
			# root = the activity
			# scope:host = activity host
			# scope:province = current phase location
			# is_valid = {
			# 	ep2_tour_phase_invalidation_check = yes
			# }

			# Run if this phase is invalidated by its is_valid trigger 
			# root = character in this phase
			# scope:activity = the activity
			# scope:host = host of the activity
			# scope:province = current phase location
			on_invalidated = {
				scope:province.province_owner = { save_scope_as = stop_host_scope }
				scope:province = { save_scope_as = tour_location }
				if = {
					limit = {
						this = scope:host
					}
					trigger_event = {
						id = tour_general.0500
					}
				}
				if = {
					limit = {
						# If I just inherited this title, don't send me two letter events
						NOT = { this = scope:host }
						# Send it to the province owner
						this = scope:province.province_owner
					}
					if = {
						limit = { has_character_flag = being_visited_on_tour }
						remove_character_flag = being_visited_on_tour
					}
					trigger_event = {
						id = tour_general.9998
					}
				}
				if = {
					limit = {
						scope:activity = { exists = var:months_of_stop }
					}
					remove_variable = months_of_stop
				}
				# Achievements.
				process_tour_achievement_tallies_effect = yes
				if = {
					limit = {
						this = scope:host
					}
					remove_variable = having_end_event
				}
			}

			on_phase_active = {
				if = {
					limit = { this = scope:host }
					scope:activity = {
						tour_stop_host_effect = yes
						add_activity_log_entry = {
							key = tour_stop_cultural_festival_log
							character = scope:host
							target = scope:stop_host_scope
							score = 50
							show_in_conclusion = yes
						}
					}
					#scope:activity.var:stop_host = {
					#	trigger_event = tour_general.0001 #event to see tell you that your liege is about to arrive, turn them away? - vassal
					#}
					# Achievements.
					process_tour_achievement_tallies_effect = yes
					scope:activity = { progress_activity_phase_after = { months = 1 } }
				}
				if = {
					limit = { 
						this = scope:host 
						scope:host = {
							OR = {
								has_character_flag = KOH_Pentecost_10_a
								has_character_flag = KOH_Pentecost_10_b
							}
						} 
					}
					
					scope:host = { trigger_event = KOH_Pentecost.12 }
				}
				if = {
					limit = { 
						this = scope:host
						scope:host = { has_character_flag = KOH_Pentecost_10_c }
					}
					
					scope:host = { trigger_event = KOH_Pentecost.11 }
				}
			}

			on_enter_phase = {
			}

			on_monthly_pulse = {
				if = {
					limit = {
						this = scope:host
					}
					scope:activity = {
						if = { # Migrate the heir to the tour activity
							limit = {
								OR = {
									NOT = { exists = var:stop_host }
									var:stop_host = { is_alive = no }
									NOT = { activity_location.county.holder = var:stop_host }
								}
							}
							remove_variable = stop_host
							tour_stop_host_effect = yes
							add_to_variable_list = {
								name = tour_vassals_to_visit
								target = var:stop_host
							}
						}
					}
					tour_progress_effect = yes
				}
				scope:host.location.county = { #remember in events that this is a county scope
					save_scope_as = cultural_festival_scope
				}
				tour_monthly_pulse_effect = {
					ON_ACTION_POOL = on_pentecost_festival
				}
			}

			on_end = {
				if = {
					limit = {
						this = scope:host
					}
					remove_variable = having_end_event
				}
			}
		}

		# Meal.
		feast_phase_meal = {		
			order = 2
			is_predefined = yes

			is_shown = { always = yes }

			on_enter_phase = {
				if = {
					limit = { this = scope:host }

					# No passive state for the toast, just jump right into it
					scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
			}

			on_phase_active = {
				# Sort some stuff on the host.
				if = {
					limit = { this = scope:host }

					scope:activity = { progress_activity_phase_after = { months = 2 } }

					# Misc. old content variable.
					## Reduce alcohol stores if appropriate.					
					if = {
						limit = { exists = var:protected_alcohol_stores }
						set_variable = {
							name = protected_alcohol_stores
							value = 0
						}
					}
					## Look for a target you're trying to befriend
					if = {
						limit = {
							any_scheme = {
								scheme_type = befriend
								scheme_target = {
									exists = involved_activity
									involved_activity = scope:activity
								}
							}
						}
						random_scheme = {
							limit = {
								scheme_type = befriend
								scheme_target = {
									exists = involved_activity
									involved_activity = scope:activity
								}
							}
							scheme_target = {
								save_scope_as = potential_friend
								scope:activity = {
									set_variable = {
										name = potential_friend
										value = scope:potential_friend
									}
								}
							}
							scheme_freeze = { days = 10 }
						}
					}
					# And now, the main event!
					## Check that there are guests apart from the feast host.
					if = {
						limit = {
							scope:activity = {
								any_attending_character = {
									count = 0
									NOT = {	this = scope:host }
								}
							}
						}
						# If there are no other guests, throw this event.
						## [sad period-appropriate trombone noises]
						trigger_event = feast.2003
					}
					## Otherwise, there are guests present.
					### The key event is chosen for the host, and fires other events from there to every participant.
					else = {
						trigger_event = feast.2001
						# Struggle Catalysts
						## We trigger this here to make sure that someone else actually turned up to the party before having it affect regional relations.
						if = {
							limit = {
								# At least one participant is involved and  of a different faith or culture
								scope:activity = {
									any_attending_character = {
										any_character_struggle = {
											involvement = involved
											phase_has_catalyst = catalyst_invite_diff_faith_culture_to_feast
										}
										is_diff_faith_or_culture_trigger = {
											CHAR = scope:host
											STATUS = involved
											STRUGGLE_TYPE = iberian_struggle
										}
									}
								}
							}
							every_character_struggle = {
								involvement = involved
								activate_struggle_catalyst = {
									catalyst = catalyst_invite_diff_faith_culture_to_feast
									character = scope:activity.activity_host
								}
							}
						}
					}
					# Accolade stuff
					if = {
						limit = {
							any_active_accolade = {
								has_accolade_parameter = accolade_party_fertility
							}
						}
						add_character_modifier = {
							modifier = accolade_charmer_party_modifier
						}
					}
					if = {
						limit = {
							any_active_accolade = {
								has_accolade_parameter = accolade_party_fertility_high
							}
						}
						add_character_modifier = {
							modifier = accolade_charmer_party_high_modifier
						}
					}
				}
				# # And for everyone else.
				# else = {
				# 	# You're busy at another party! (invites were sent the same day, but you agreed to another party after this one )
				# 	if = {
				# 		limit = {
				# 			exists = var:booked_for_a_party
				# 			var:booked_for_a_party = {
				# 				NOT = { this = scope:activity.activity_host }
				# 			}
				# 		}
				# 		trigger_event = feast.0010
				# 	}
				# 	else = {
				# 		random_list = {
				# 			0 = { #they don't join
				# 				modifier = {
				# 					add = 100
				# 					scope:host = { has_variable = murder_feast_perpetrator_var } #if you have hosted a murder feast
				# 				}
				# 			}
				# 			100 = {
				# 				trigger_event = feast.7051
				# 			}
				# 		}
				# 		# Take care of reveller stuff for everyone else.
				# 		if = {
				# 			limit = { 
				# 				NOT = { has_trait = temperate }
				# 			}
				# 			# Reveler lifestyle tracking:
				# 			reveler_points_gain_effect = {
				# 				CHANGE = 1
				# 				RANDOM_CHANGE = 1
				# 			}
				# 			# Remove blocker for invitations to feasts (the feast is now active and will work as a blocker)
				# 			remove_variable = booked_for_a_party
				# 		}
				# 	}
				# }
			}
			
			on_weekly_pulse = {
				if = { #host
					limit = {
						this = scope:host
					}
					trigger_event = { on_action = feast_new_event_selection_tombola }
				}
				else_if = { #guest
					limit = {
						NOT = { this = scope:host }
					}
					trigger_event = { on_action = feast_default_event_selection }
				}
			}
		}

		# Toast.
		feast_phase_toast = {
			order = 3
			is_predefined = yes

			on_enter_phase = {
				if = {
					limit = { this = scope:host }

					# No passive state for the toast, just jump right into it
					scope:activity = { progress_activity_phase_after = { days = 1 } }
				}
			}

			on_phase_active = {
				if = {
					limit = { this = scope:host }

					if = { # Regular feast
						limit = {
							scope:activity = {
								has_activity_option = {
									category = special_type
									option = feast_type_generic
								}
							}
						}

						# Save the GoH for the sake of my sanity.
						scope:activity.special_guest:honorary_guest_regular ?= { save_scope_as = goh }
						
						# Trigger summary event, also handles guest events
						trigger_event = feast.7201
					}
					scope:activity = { progress_activity_phase_after = { weeks = 1 } }
				}
			}

			on_end = {
				# Adjust everyone's waistlines.
				target_weight_modifier_effect = {
					VALUE = feast_weight_modifier_value
				}
			}
		}

		#LAST PHASE
		# JOUST
		# contest_horse_aptitude_value
		tournament_phase_joust = {			
			order = 4
			is_predefined = yes

			on_enter_phase = {
				if = {
					limit = { this = scope:host }
					scope:activity = { progress_activity_phase_after = { weeks = tournament_qualification_duration_weeks } }
				}

				#MOVED ON PROGRESS TO HERE!
				scope:activity = {
					### PROGRESS TO VICTORY ###
					if = {
						limit = { activity_tournament_versus_contest_trigger = yes }
						set_variable = {
							name = progress_to_victory_threshold
							value = 10
						}
					}
					else = {
						set_variable = {
							name = progress_to_victory_threshold
							value = 20
						}
					}
				}
				## Add characters to contestant/spectator subset based on eligibility
				tournament_add_contestant_or_spectator_effect = yes
				if = {
					limit = { exists = current_travel_plan }
					current_travel_plan = {
						every_entourage_character = {
							limit = { is_participant_in_activity = scope:activity }
							save_scope_as = new_arrival
							tournament_add_contestant_or_spectator_effect = yes
						}
					}
				}
				# Remove score from previous contests (if relevant)
				if = {
					limit = { exists = var:progress_to_victory_score }
					remove_variable = progress_to_victory_score
				}
				# Set PtV threshold based on contest type
				if = {
					limit = { this = scope:host }
					scope:activity = {
						if = {
							limit = { activity_tournament_versus_contest_trigger = yes }
							set_variable = {
								name = progress_to_victory_threshold
								value = 10
							}
						}
						else = {
							set_variable = {
								name = progress_to_victory_threshold
								value = 20
							}
						}
					}
				}
				set_passive_contest_aptitude_and_progress_effect = yes
			}

			on_phase_active = {
				if = {
					limit = { this = scope:host }
					scope:activity = { progress_activity_phase_after = { months = tournament_versus_duration_months } }
					tournament_contest_versus_composition_effect = { CONTEST = joust SKILL = horse } # Create competitor list and log entry
				}
				tournament_add_as_spectator_effect = yes
				# Achievements.
				if = {
					limit = {
						exists = global_var:started_sir_lance_a_lot_achievement
						is_ai = no
						has_trait_xp = {
							trait = tourney_participant
							track = horse
							value >= 100
						}
					}
					set_global_variable = {
						name = achieved_sir_lance_a_lot_achievement
						value = yes
					}
				}
			}

			on_weekly_pulse = {
			}

			on_end = {
				if = {
					limit = { this = scope:host }
					tournament_contest_versus_winner_effect = { CONTEST = joust }
				}
				# Achievements.
				if = {
					limit = {
						exists = global_var:started_a_knights_tale_achievement
						is_ai = no
						scope:activity = {
							any_guest_subset = {
								name = winner
								phase = tournament_phase_joust
								is_knight_of = root
								NOT = { exists = dynasty }
							}
						}
					}
					scope:activity = {
						random_guest_subset = {
							name = winner
							phase = tournament_phase_joust
							limit = {
								is_knight_of = root
								NOT = { exists = dynasty }
							}
							save_scope_as = cheevo_knight
						}
					}
					add_to_variable_list = {
						name = candidate_a_knights_tale_achievement
						target = scope:cheevo_knight
					}
				}
			}

			ai_will_do = {
				add = {
					value = 100 # Popular contest
					desc = contest_ai_base
				}
				add = {
					value = contest_horse_aptitude_value
					desc = contest_horse_aptitude_value
				}
				if = {
					limit = {
						has_trait = tourney_participant
						has_trait_xp = {
							trait = tourney_participant
							track = horse
							value >= 25
						}
					}
					add = {
						value = 50
						desc = tourney_participant_horse
					}
				}
				if = {
					limit = { 
						culture = { has_cultural_tradition = tradition_chivalry }
					}
					add = {
						value = 25
						desc = tradition_chivalry_name
					}
				}
				if = {
					limit = { 
						culture = { has_cultural_tradition = tradition_martial_admiration }
					}
					add = {
						value = 25
						desc = tradition_martial_admiration_name
					}
				}
				if = {
					limit = { 
						culture = { has_cultural_tradition = tradition_chanson_de_geste }
					}
					add = {
						value = 25
						desc = tradition_chanson_de_geste_name
					}
				}
				if = {
					limit = {
						culture = { has_cultural_era_or_later = culture_era_high_medieval }
					}
					add = {
						value = 50
						desc = culture_era_high_medieval
					}
				}
				if = {
					limit = {
						culture = { has_cultural_era_or_later = culture_era_late_medieval }
					}
					add = {
						value = 50
						desc = culture_era_late_medieval
					}
				}
				if = {
					limit = { 
						culture = { 
							OR = {
								has_cultural_pillar = heritage_frankish
								has_cultural_pillar = heritage_west_germanic
								has_cultural_pillar = heritage_central_germanic
							}
						}
					}
					add = {
						value = 15
						desc = game_rule_category_culture
					}
				}
			}
		}
	}
	
	###################
	# LOCALES
	###################

	locales = {
		tourney_grounds = {
			locales = { tournament_locale_tournament_grounds }
		}
		campsite = {
			locales = { tournament_locale_visitor_camp }
		}
		entertainment = {
			locales = { tournament_locale_tavern }
		}
		town = {
			locales = { tournament_locale_settlement }
		}
		religious = {
			locales = { tournament_locale_religious_building }
		}
		shop_2 = {
			locales = { tournament_locale_artisans }
		}
	}
	locale_cooldown = { days = 20 }
	auto_select_locale_cooldown = { days = 60 }
	early_locale_opening_duration = { days = 75 }

	###################
	# GUEST HANDLING
	###################

	open_invite = yes
	
	max_guests = 550
	
	can_be_activity_guest = {
		#scope:activity = { has_variable = invite_guests }
		is_adult = yes
		in_diplomatic_range = scope:host
		is_pool_guest = no
	}

	host_intents = {
		intents = { reduce_stress_intent win_contest_intent recruit_knights_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { win_contest_intent reduce_stress_intent }
	}

	guest_intents = {
		intents = { reduce_stress_intent win_contest_intent recruit_knights_intent woo_attendee_intent befriend_attendee_intent }
		default = reduce_stress_intent
		player_defaults = { win_contest_intent reduce_stress_intent }
	}

	guest_join_chance = {
		base = 5
		base_activity_modifier = yes

		# Scripted Modifiers
		activity_guest_shared_ai_accept_modifier = yes
		activity_guest_health_ai_accept_modifier = yes
		activity_guest_tournament_ai_accept_modifier = yes
		# Blademaster Accolade increasing invite acceptance
		modifier = {
   		   scope:host = {
   		   		any_active_accolade = {
					has_accolade_parameter = acclaimed_knight_tournament_invite_acceptance_bonus
				}
   		   }
   		   add = accolade_tournament_invite_acceptance_value
   		}
		modifier = {
   		   government_has_flag = government_is_mercenary
   		   add = -5000
   		}
		modifier = {
			NOT = { scope:host = { has_variable = invite_guests } }
			add = -9000
		}
	}

	guest_subsets = {
		contestant # Potentially eligible competitor - healthy & martial sex (if relevant)
		spectator # Ineligible for contest - unhealthy/non-martial sex/excluded
		qualified # Actively qualified and competing - used as equivalent of quarter_finalist for VERSUS
		third_place # Won third place - only used in TURN/RACE
		second_place # Won second place - not used in TEAM
		winner # Won contest overall - contains all winners in TEAM
		semi_finalist # Reached contest semi-finals - ALWAYS 4
		finalist # Reached contest finals - ALWAYS 2
		team_alpha # MAX 10
		team_beta # MAX 10
	}

	special_guests = {
		honorary_guest_regular = {
			is_required = no

			can_pick = {
				NOT = { this = scope:host }
				is_healthy = yes
				is_adult = yes
				NOT = { is_spouse_of = scope:host }
				trigger_if = {
					limit = {
						scope:host = { is_ai = yes }
					}
					OR = {
						is_vassal_of = scope:host
						target_is_vassal_or_below = scope:host
						has_relation_friend = scope:host
						has_relation_lover = scope:host
					}
				}
			}
			
			ai_will_do = {
				value = 10
			}
		}
	}
	
	###################
	# ON ACTIONS
	###################

	pulse_actions = {
		entries = { guest_friendship guest_insulted tournament_guest_ptv_small tournament_acclaimed_participant tournament_entry_fee tournament_win_memory tournament_studied_techniques tournament_knight_skill spouse_skill_diplomacy_improves spouse_gives_hook relation_gains_friend host_gains_diplo_xp host_gains_steward_xp host_gains_intrigue_xp }
		chance_of_no_event = 3
	}

	on_start = { # Activity scope
		if = {
			limit = { exists = scope:activity }
			### CHAMPION ###
			if = {
				limit = {
					exists = special_guest:special_guest_champion
					special_guest:special_guest_champion.liege = scope:host
					special_guest:special_guest_champion = {
						NOT = { has_court_position = champion_court_position }
					}
					scope:host = {
						can_appoint_char_to_court_position = {
							CHAR = scope:activity.special_guest:special_guest_champion
							COURT_POS = champion_court_position
						}
					}
				}
				scope:host = {
					send_interface_message = {
						title = tournament_activity_champion_appointed
						left_icon = scope:activity.special_guest:special_guest_champion
						appoint_court_position = {
							recipient = scope:activity.special_guest:special_guest_champion
							court_position = champion_court_position
						}
					}
				}
			}
			if = { #Send a message and rewards
				limit = {
					exists = special_guest:special_guest_champion
					special_guest:special_guest_champion.liege = scope:host
				}
				special_guest:special_guest_champion = {
					save_scope_as = tournament_special_guest_champion
				}
				scope:host = {
					send_interface_toast = {
						title = tournament_personal_champion_tt
						left_icon = scope:host
						right_icon = scope:tournament_special_guest_champion

						scope:tournament_special_guest_champion = {
							add_opinion = {
						 		target = scope:host
						 		modifier = tournament_appointed_champion_opinion
						 		opinion = 35
							}

							if = { # If liege is a duke
								limit = {
									scope:host = {
										highest_held_title_tier = tier_duchy
									}
								}
								add_prestige = minor_prestige_value
							}
							else_if = { # If liege is a king
								limit = {
									scope:host = {
										highest_held_title_tier = tier_kingdom
									}
								}
								add_prestige = medium_prestige_value
							}
							else = { # If liege is an emperor
								add_prestige = major_prestige_value
							}
						}
					}
				}
			}
			# # Opening event/invalidation if not enough people are present
			# scope:host = {
			# 	trigger_event = {
			# 		on_action = tournament_opening_on_action
			# 		days = 20
			# 	}
			# }
			
			scope:activity = {
				# ### PROGRESS TO VICTORY ###
				# if = {
				# 	limit = { activity_tournament_versus_contest_trigger = yes }
				# 	set_variable = {
				# 		name = progress_to_victory_threshold
				# 		value = 10
				# 	}
				# }
				# else = {
				# 	set_variable = {
				# 		name = progress_to_victory_threshold
				# 		value = 20
				# 	}
				# }
				### LOCALES ###
				# Tavernkeeper
				if = {
					limit = { has_active_locale = tournament_locale_tavern }
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_available_ai_adult_locale_person = yes
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_available_ai_adult_locale_person = yes
							}
							save_scope_as = tournament_tavernkeeper
						}
					}
					else = {
						create_character = {
							template = tournament_locale_character
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_tavernkeeper
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_tavernkeeper
						value = scope:tournament_tavernkeeper
					}
				}
				# Armorer
				if = {
					limit = {
						has_active_locale = tournament_locale_artisans
						OR = {
							#has_current_phase = tournament_phase_melee
							has_current_phase = tournament_phase_joust
							#has_current_phase = tournament_phase_duel
						}
					}
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_available_ai_adult_locale_person = yes
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_available_ai_adult_locale_person = yes
							}
							save_scope_as = tournament_armorer
						}
					}
					else = {
						create_character = {
							template = tournament_locale_character
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_armorer
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_armorer
						value = scope:tournament_armorer
					}
				}
				# Tailor
				if = {
					limit = { has_active_locale = tournament_locale_artisans }
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_available_ai_adult_locale_person = yes
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_available_ai_adult_locale_person = yes
							}
							save_scope_as = tournament_tailor
						}
					}
					else = {
						create_character = {
							template = tournament_locale_character
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_tailor
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_tailor
						value = scope:tournament_tailor
					}
				}
				# Priest
				if = {
					limit = { has_active_locale = tournament_locale_religious_building }
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_clergy = yes
								faith = scope:host.faith
								is_available_ai_adult = yes								
								has_no_particular_noble_roots_trigger = yes
								
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_clergy = yes
								faith = scope:host.faith
								is_available_ai_adult = yes
								has_no_particular_noble_roots_trigger = yes								
							}
							save_scope_as = tournament_priest
						}
					}
					else = {
						create_character = {
							template = tournament_priest_character_template
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_priest
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_priest
						value = scope:tournament_priest
					}
				}
				# Farrier
				if = {
					limit = {
						has_active_locale = tournament_locale_artisans
						OR = {
							#has_current_phase = tournament_phase_horse_race
							has_current_phase = tournament_phase_joust
						}
					}
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_available_ai_adult_locale_person = yes
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_available_ai_adult_locale_person = yes
							}
							save_scope_as = tournament_farrier
						}
					}
					else = {
						create_character = {
							template = tournament_locale_character
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_farrier
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_farrier
						value = scope:tournament_farrier
					}
				}
				# Bowyer
				if = {
					limit = {
						has_active_locale = tournament_locale_artisans
						#has_current_phase = tournament_phase_archery
					}
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_available_ai_adult_locale_person = yes
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_available_ai_adult_locale_person = yes
							}
							save_scope_as = tournament_bowyer
						}
					}
					else = {
						create_character = {
							template = tournament_locale_character
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_bowyer
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_bowyer
						value = scope:tournament_bowyer
					}
				}
				# Weaponsmith
				if = {
					limit = {
						has_active_locale = tournament_locale_artisans
						OR = {
							#has_current_phase = tournament_phase_melee
							has_current_phase = tournament_phase_joust
							#has_current_phase = tournament_phase_duel
						}
					}
					if = {
						limit = {
							any_pool_character = {
								province = scope:activity.activity_location
								is_available_ai_adult_locale_person = yes
							}
						}
						random_pool_character = {
							province = scope:activity.activity_location
							limit = {
								is_available_ai_adult_locale_person = yes
							}
							save_scope_as = tournament_weaponsmith
						}
					}
					else = {
						create_character = {
							template = tournament_locale_character
							dynasty = none
							location = scope:activity.activity_location
							save_scope_as = tournament_weaponsmith
						}
					}
					set_variable = { #we set a variable on the activity instead of the character in case another tournament grabs the same pool
						name = tournament_weaponsmith
						value = scope:tournament_weaponsmith
					}
				}
			}
		}
		
		# Make sure that Tournaments are held roughly every 5 years per major world area
		if = {
			limit = {
				scope:host.location = { geographical_region = world_middle_east }
				NOT = {
					exists = global_var:tournament_world_middle_east_motivation
				}
			}
			set_global_variable = {
				name = tournament_world_middle_east_motivation
				value = yes
				days = 1825
			}
		}
		
		if = {
			limit = {
				scope:host.location = {
					geographical_region = world_europe
					NOT = {
						geographical_region = world_europe_west 
					}
				}
				NOT = {
					exists = global_var:tournament_world_europe_motivation
				}
			}
			set_global_variable = {
				name = tournament_world_europe_motivation
				value = yes
				days = 1825
			}
		}
		
		if = {
			limit = {
				scope:host.location = { geographical_region = world_europe_west }
				NOT = {
					exists = global_var:tournament_world_europe_west_motivation
				}
			}
			set_global_variable = {
				name = tournament_world_europe_west_motivation
				value = yes
				days = 1825
			}
		}
		
		if = {
			limit = {
				scope:host.location = { geographical_region = world_steppe }
				NOT = {
					exists = global_var:tournament_world_steppe_motivation
				}
			}
			set_global_variable = {
				name = tournament_world_steppe_motivation
				value = yes
				days = 1825
			}
		}
		
		if = {
			limit = {
				scope:host.location = { geographical_region = world_africa }
				NOT = {
					exists = global_var:tournament_world_africa_motivation
				}
			}
			set_global_variable = {
				name = tournament_world_africa_motivation
				value = yes
				days = 1825
			}
		}
		
		if = {
			limit = {
				scope:host.location = { geographical_region = world_india }
				NOT = {
					exists = global_var:tournament_world_india_motivation
				}
			}
			set_global_variable = {
				name = tournament_world_india_motivation
				value = yes
				days = 1825
			}
		}

		character:212501 = {
			save_scope_as = frederick
		}

		character:7557 = {
			save_scope_as = konrad
		}

		if = {
			limit = { title:d_mainz.title_capital_county.holder = title:d_mainz.holder }
			title:d_mainz.title_capital_county = {
				save_scope_as = mainz_county
			}
		}
		else = {
			title:d_mainz.holder.capital_county = {
				save_scope_as = mainz_county
			}
		}

	    scope:mainz_county.title_province = {
        	set_global_variable = {
				name = pentecost_host_location
				value = yes
			}
        }

		#booleans
		set_variable = {
			name = pope_coming
			value = yes # this one starts as yes so if you rip off konrad the pope doesn't even ask
		}
		set_variable = {
			name = lion_coming
			value = no
		}
		set_variable = {
			name = many_tournaments
			value = no
		}
	}

	on_enter_travel_state = { # Character scope
	}

	on_travel_state_pulse = { # Character scope
		trigger_event = { on_action = tournament_leave_travel_state }
	}

	on_leave_travel_state = {
		if = {
			limit = {
				NOT = { this = scope:host }
				is_landed = yes
				highest_held_title_tier >= tier_duchy
				primary_title = {
					is_mercenary_company = no
					is_holy_order = no
				}
			}
			save_scope_as = new_prestige_arrival
			scope:host = {
				add_to_variable_list = {
					name = new_prestige_arrival
					target = scope:new_prestige_arrival
				}
				if = {
					limit = {
						NOT = { has_character_flag = prestige_arrival_toast }
					}
					add_character_flag = prestige_arrival_toast
					trigger_event = {
						id = tournament_events.0200
						weeks = 2
					}
				}
			}
		}
		trigger_event = { on_action = tournament_leave_travel_state }
	}

	on_enter_passive_state = { # Character scope
		# Inform host of intent target arrival
		activity_intent_target_arrival_notification_effect = yes
		# Save as contestant or spectator based on eligibility
		save_scope_as = new_arrival
		if = {
			limit = {
				NAND = {
					this = scope:host
					scope:activity.activity_location = scope:host.capital_province
				}
				NOT = { has_character_flag = arrived_at_tournament_flag }
			}
			trigger_event = KOH_Pentecost.4
		}
	}

	on_passive_state_pulse = { # Character scope
		# Fire host events
		if = {
			limit = { this = scope:host }
			trigger_event = { on_action = tournament_passive_state_host_pulse }
			# Set PtV threshold based on contest type
			scope:activity = {
				if = {
					limit = { activity_tournament_versus_contest_trigger = yes }
					set_variable = {
						name = progress_to_victory_threshold
						value = 10
					}
				}
				else = {
					set_variable = {
						name = progress_to_victory_threshold
						value = 20
					}
				}
			}
			chance_for_knight_appearance_effect = yes
		}
		# Fire guests events
		else = {
			trigger_event = { on_action = tournament_passive_state_guest_pulse }
		}
		# Set PtV threshold based on contest type
		set_passive_contest_aptitude_and_progress_effect = yes
	}

	on_active_state_pulse = { # Character scope
		trigger_event = { on_action = pentecost_tournament_active_state_pulse }
	}

	on_complete = { # Character scope
		# Remove remaining recurring characters.
		clean_up_recurring_characters_effect = yes
		tournament_clear_tournament_variables_effect = yes
		tournament_clear_tournament_modifiers_effect = yes
		# Dynasty Legacies
		host_has_taken_freebie_activity_effect = yes
		# Achievements.
		if = {
			# Limit it to the host so that we only do this _once_, even though they're not strictly relevant.
			limit = {
				this = scope:host
				exists = global_var:started_little_william_marshal_achievement # Overall tally
				exists = global_var:little_william_marshal_achievement_tally # Won tally
				global_var:started_little_william_marshal_achievement >= 3 # At least 3 contests held
				global_var:little_william_marshal_achievement_tally >= global_var:started_little_william_marshal_achievement # Won all of them
			}
			set_global_variable = {
				name = finished_little_william_marshal_achievement
				value = yes
			}
			set_global_variable = {
				name = little_william_marshal_achievement_tally
				value = 0
			}
			set_global_variable = {
				name = started_little_william_marshal_achievement
				value = 0
			}
		}
	}

	###################
	# GRAPHICS
	###################

	### Plugin widgets
	activity_window_widgets = {
		tournament_toggle_my_knights_button = "guest_management_container"
		tournament_my_attending_knights_view = "activity_locale_other_custom_widgets"
		tournament_contest_information = "activity_locale_other_custom_widgets"

		tournament_progress_to_victory_widget = "activity_locale_window_right_bar_container"
		
		tournament_bottom_middle_widget = "activity_locale_bottom_middle"

		tournament_active_phase_contest_info_button = "bottom_right_content_before_guests"

		tournament_fullscreen_pivotal_event_widget = "widget_activity_locale_fullscreen_other_event"

		tournament_my_aptitudes = "activity_locale_bottom_left"

		tournament_active_phase_background = "activity_scene"
	}

	activity_planner_widgets = {
		tournament_contest_selection = "activity_plugin_center"
		tournament_planning_selected_contests = "planner_details_header"
	}
}
